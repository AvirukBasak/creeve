/**
 * WARNING: DEMO CREEVE CODE, WILL NOT COMPILE
 *
 */

namespace MySpace
{
    class Cls
    {
        int member;
        // more stuff
        constructor ()
        {
            // code
        }
        constructor (int x)
        {
            this.member = x;
            // code
        }
        destructor ()
        {
            // code
        }
        int foo ()
        {
            this.member = 5;
            this.bar();
            return 0;
        }
        void bar ()
        {
            // code
        }
    }
}

int main()
{
    MySpace::Cls cl1 = new MySpace::Cls();
    int x = cl1.foo ();

    // without new
    MySpace::Cls cl1 = MySpace::Cls();
}

// -----------------------------------------

// Compilation Result:

# include <stdio.h>
# include <stdlib.h>

typedef struct MySpace_Cls
{
    int member;
    // more stuff
} MySpace_Cls;

void MySpace_Cls_default_constructor (MySpace_Cls *this);
void MySpace_Cls_param_constructor (MySpace_Cls *this, int x);
void MySpace_Cls_destructor (MySpace_Cls *this);
int MySpace_Cls_foo (MySpace_Cls *this);
void MySpace_Cls_bar (MySpace_Cls *this);

void MySpace_Cls_default_constructor (MySpace_Cls *this)
{
    if (this == NULL) {
        abort();
    }

    // code

}

void MySpace_Cls_param_constructor (MySpace_Cls *this, int x)
{
    if (this == NULL) {
        abort();
    }

    // code: this.member will be converted to this->member
    this->member = x;

}

void MySpace_Cls_destructor (MySpace_Cls *this)
{
    if (this == NULL) {
        abort();
    }

    // code

    free (this);
}

int MySpace_Cls_foo (MySpace_Cls *this)
{
    if (this == NULL) {
        abort();
    }

    // code: this.member will be converted to this->member
    this->member = 5;
    MySpace_Cls_bar (this);

    return 0;
}

void MySpace_Cls_bar (MySpace_Cls *this)
{
    if (this == NULL) {
        abort();
    }

    // code

}

int main()
{
    // default constructor call with new
    MySpace_Cls *cl1_ptr = (MySpace_Cls *) malloc (sizeof (MySpace_Cls) * 1);
    if (cl1_ptr == NULL) {
        abort();
    }
    // this line allows use of cl2.member syntax, else one must use cl1_ptr->member
    MySpace_Cls cl1 = *cl1_ptr;
    MySpace_Cls_default_constructor (&cl1);

    int x = MySpace_Cls_foo (&cl1);

    // without new
    MySpace_Cls cl2;
    MySpace_Cls_default_constructor (&cl2);
}
